using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AutoByte
{
    [Generator]
    public class AutoByteSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var syntaxReceiver = (SyntaxReceiver)context.SyntaxReceiver;

            foreach (var classDeclaration in syntaxReceiver.CandidateClasses)
            {
                var className = classDeclaration.Identifier.ToString();
                //var namespaceName = ((NamespaceDeclarationSyntax)classDeclaration.Parent).Name.ToString();

                var source = GenerateDeserializeImplementation("AutoByte.Tests", className);
                context.AddSource($"{className}.g.cs", SourceText.From(source, Encoding.UTF8));           
            }
        }

        private string GenerateDeserializeImplementation(string namespaceName, string className)
        {
            return $@"// <auto-generated/>
using AutoByte;

namespace {namespaceName}
{{
    public partial class {className} : IByteStructure
    {{
        public int Deserialize(ref ByteSlide slide)
        {{
            return 0;
        }}
    }}
}}
";
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        private class SyntaxReceiver : ISyntaxReceiver
        {
            public List<ClassDeclarationSyntax> CandidateClasses { get; } = new List<ClassDeclarationSyntax>();

            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                if (syntaxNode is ClassDeclarationSyntax classDeclaration)
                {
                    var autoByteStructureAttribute = classDeclaration.AttributeLists
                        .SelectMany(a => a.Attributes)
                        .FirstOrDefault(a => a.Name.ToString() == "AutoByteStructure");
                    if (autoByteStructureAttribute != null)
                    {
                        CandidateClasses.Add(classDeclaration);
                    }
                }
            }
        }
    }
}
